// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const addTask = `-- name: AddTask :one
INSERT INTO todo (content,creationDate) VALUES (?1,datetime('now')) RETURNING id, content, done, creationdate
`

func (q *Queries) AddTask(ctx context.Context, content string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, addTask, content)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Done,
		&i.Creationdate,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT
  id, content, done, creationdate
FROM
  todo
ORDER BY creationDate DESC
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Done,
			&i.Creationdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTask = `-- name: RemoveTask :one
DELETE FROM todo WHERE id = ?1 RETURNING id, content, done, creationdate
`

func (q *Queries) RemoveTask(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, removeTask, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Done,
		&i.Creationdate,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE todo SET done = ?1 WHERE id = ?2 RETURNING id, content, done, creationdate
`

type UpdateTaskParams struct {
	IsDone bool  `json:"isDone"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTask, arg.IsDone, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Done,
		&i.Creationdate,
	)
	return i, err
}
